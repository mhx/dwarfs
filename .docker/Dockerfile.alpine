# syntax=docker/dockerfile:1
ARG ARCH=amd64
FROM $ARCH/alpine:latest

ARG ARCH
ARG TARGET_ARCHS
ARG TOOLCHAIN_OPTIMIZE=2

RUN apk update
RUN apk upgrade
RUN qemu_pkgs=""; \
    for arch in $(echo $TARGET_ARCHS | tr ',' ' '); do \
        qemu_pkgs="$qemu_pkgs qemu-$arch"; \
    done; \
    apk add --no-cache \
        bash-completion \
        build-base \
        wget \
        curl \
        vim \
        tar \
        ripgrep \
        less \
        gcc \
        g++ \
        clang18 \
        clang19 \
        clang20 \
        lld \
        git \
        xz \
        gzip \
        bzip2 \
        zstd \
        ccache \
        ninja-build \
        cmake \
        make \
        bison \
        flex \
        ronn \
        perf \
        py3-pip \
        py3-xxhash \
        py3-zstd \
        py3-lz4 \
        fuse \
        fuse3 \
        pkgconf \
        meson \
        autoconf \
        strace \
        gdb \
        gmp-dev \
        zlib-static \
        zstd-static \
        zlib-dev \
        zstd-dev \
        mpfr-dev \
        mpc1-dev \
        isl-dev \
        texinfo \
        linux-headers \
        gdb-multiarch \
        rsync \
        screen \
        $qemu_pkgs

COPY fetch.sh /usr/local/bin/fetch.sh

# Install mold
COPY install-mold.sh /usr/local/bin/install-mold.sh
RUN --mount=type=cache,id=ccache,target=/root/.ccache --mount=type=cache,id=pkgcache,target=/root/.pkgcache \
    bash /usr/local/bin/install-mold.sh

# Install bloaty
COPY install-bloaty.sh /usr/local/bin/install-bloaty.sh
RUN --mount=type=cache,id=ccache,target=/root/.ccache --mount=type=cache,id=pkgcache,target=/root/.pkgcache \
    if [ "$ARCH" == "amd64" ]; then \
        bash /usr/local/bin/install-bloaty.sh; \
    else \
        echo "Skipping bloaty installation for $ARCH."; \
    fi

RUN apk del linux-headers

# Install size-optimized and static-link-optimized libstdc++
COPY install-toolchain.sh /usr/local/bin/install-toolchain.sh
RUN --mount=type=cache,id=ccache,target=/root/.ccache --mount=type=cache,id=pkgcache,target=/root/.pkgcache \
    bash /usr/local/bin/install-toolchain.sh $TOOLCHAIN_OPTIMIZE $TARGET_ARCHS

RUN apk del zlib-dev zstd-dev

# Install all static libraries
COPY install-static-libs.sh /usr/local/bin/install-static-libs.sh

RUN --mount=type=cache,id=ccache,target=/root/.ccache --mount=type=cache,id=pkgcache,target=/root/.pkgcache \
    bash /usr/local/bin/install-static-libs.sh :all $TARGET_ARCHS

# Install UPX
# UPX isn't supported on RISC-V/S390 (yet), so skip this
RUN if [ "$ARCH" == "amd64" ] || [ "$ARCH" == "arm64v8" ]; then \
        wget -O - https://github.com/upx/upx/releases/download/v5.0.2/upx-5.0.2-$(bash -c "echo \${0//v8/}" $ARCH)_linux.tar.xz | tar -xJf - -C /usr/local/bin --strip-components=1 --wildcards "*/upx"; \
    else \
        echo "Skipping UPX installation for $ARCH architecture while it is not supported."; \
        echo "See https://github.com/upx/upx/discussions/793 for details."; \
    fi

RUN pip3 install --break-system-packages --root-user-action ignore mistletoe

# Set up git & user
RUN git config --global --add safe.directory /workspace
RUN adduser -G users -s bash -u 1000 -D mhx
USER mhx
ENTRYPOINT /workspace/.docker/build-linux.sh
