# Copyright (c) 2021-2023, [Ribose Inc](https://www.ribose.com).
# All rights reserved.
# This file is a part of tamatebako
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

name: Ubuntu

on:
  schedule:
    - cron: "0 6 * * 6"
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '**.adoc'
      - '**.md'
      - '.cirrus.yml'
      - '.github/workflows/*.yml'
      - '!.github/workflows/ubuntu.yml'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.adoc'
      - '**.md'
      - '.cirrus.yml'
      - '.github/workflows/*.yml'
      - '!.github/workflows/ubuntu.yml'
  workflow_dispatch:

concurrency:
  group: '${{ github.workflow }}-${{ github.job }}-${{ github.head_ref || github.ref_name }}'
  cancel-in-progress: true

env:
  CCACHE_FLD: ccache
  RUBY_VER: 3.4

jobs:
  build:
    name: ${{ matrix.architecture.platform }}/${{ matrix.config.os }} [ ${{ matrix.config.env.CC }}, scope ${{ matrix.setup.scope }}, ${{ matrix.config.build_type }} ${{ matrix.config.extra_opts }} ]
    runs-on: ${{ matrix.architecture.host }}
    container:
      image: 'ghcr.io/${{ github.repository_owner }}/tebako-${{ matrix.config.os }}-dev'
      options: --privileged     # for fuse to work for full mode
    strategy:
      fail-fast: false
      matrix:
        architecture:
          - { host: 'ubuntu-22.04', platform: linux/amd64 }
          - { host: 'ubuntu-22.04-arm', platform: linux/arm64 }
        config:
          - { os: ubuntu-20.04, env: { CC: gcc-10,   CXX: g++-10     }, build_type: Release, extra_opts: '' }
          - { os: ubuntu-20.04, env: { CC: clang-12, CXX: clang++-12 }, build_type: Release, extra_opts: '' }
# .......................................
# Tebako is staying with Ubuntu 20.04 for now
#          - { os: ubuntu-22.04, env: { CC: gcc-12,   CXX: g++-12     }, build_type: Release, extra_opts: '' }
# https://github.com/llvm/llvm-project/issues/56357
# On Ubuntu 22  affects clang versions prior to 15 (file entry.cpp)
#          - { os: ubuntu-22.04, env: { CC: clang-15, CXX: clang++-15 }, build_type: Release, extra_opts: '' }
# .......................................

#  We are running two configurations:
#   - ALL in order to run regression tests
#   - MKD just to be sure that it build ok
        setup:
          - { scope: 'ALL',  tests: 'ON'  }
          - { scope: 'MKD',  tests: 'OFF' }

        include:
          - config:       { os: ubuntu-20.04, env: { CC: clang-12, CXX: clang++-12 }, build_type: RelWithDebInfo, extra_opts: '-DENABLE_ASAN=1' }
            setup:        { scope: 'ALL', tests: 'ON'  }
            architecture: { host: 'ubuntu-22.04', platform: linux/amd64 }
          - config:       { os: ubuntu-20.04, env: { CC: clang-12, CXX: clang++-12 }, build_type: RelWithDebInfo, extra_opts: '-DENABLE_TSAN=1' }
            setup:        { scope: 'ALL', tests: 'ON'  }
            architecture: { host: 'ubuntu-22.04', platform: linux/amd64 }
          - config:       { os: ubuntu-20.04, env: { CC: clang-12, CXX: clang++-12 }, build_type: RelWithDebInfo, extra_opts: '-DENABLE_UBSAN=1' }
            setup:        { scope: 'ALL', tests: 'ON'  }
            architecture: { host: 'ubuntu-22.04', platform: linux/amd64 }

    env: ${{ matrix.config.env }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install packages
        run: |
          sudo apt-get -y install ccache

      - name: Install libfuse 3 (Full mode)
        if: ${{ matrix.setup.scope == 'ALL' }}
        run: |
          sudo apt-get -y install libfuse3-dev fuse3

      - name: Remove libfuse 3 (tebako-optimized mode)
        if: ${{ matrix.setup.scope != 'ALL' }}
        run: |
          sudo apt-get -y remove fuse3 libfuse3-dev fuse libfuse-dev

# **** Not building man pages ever ****
# sudo apt install ronn does not install a version good enough - it cannot process one of the files
#      - name: Install Ruby
#        if: ${{ matrix.setup.scope == 'ALL' }}
#        uses: ruby/setup-ruby@v1
#        with:
#          ruby-version: ${{ env.RUBY_VER }}
#      - name: Install ronn
#        if: ${{ matrix.setup.scope == 'ALL' }}
#        run: sudo gem install ronn


      - name: Get number of CPU cores
        run:  echo "CORES=$(nproc --all)" >> $GITHUB_ENV

      - name: Build and test
        uses: ./.github/actions/build-and-test
